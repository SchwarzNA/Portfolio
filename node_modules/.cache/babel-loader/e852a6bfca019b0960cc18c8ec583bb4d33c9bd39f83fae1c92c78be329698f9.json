{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jocelyn Nicolas\\\\Documents\\\\Timothy\\\\College\\\\5th Year - 2st Sem\\\\RubyOnRails\\\\Portfolio\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport AppRouter from './AppRouter';\nimport './styles.css'; // Global styles with theme variables\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Initialize theme from localStorage if available\n  const [theme, setTheme] = useState(() => {\n    return localStorage.getItem('theme') || 'light';\n  });\n\n  // Toggle between 'light' and 'dark'\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  // Persist theme and update global body class on theme change\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    // Adding the theme class to body for global styling\n    document.body.className = theme;\n  }, [theme]);\n  return (\n    /*#__PURE__*/\n    // Apply a class to the top-level div based on the theme\n    _jsxDEV(\"div\", {\n      className: `App ${theme}`,\n      children: /*#__PURE__*/_jsxDEV(AppRouter, {\n        theme: theme,\n        toggleTheme: toggleTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(App, \"zjp7CbQfpdkB/n/MDCYfrIEBkRI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AppRouter","jsxDEV","_jsxDEV","App","_s","theme","setTheme","localStorage","getItem","toggleTheme","prev","setItem","document","body","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jocelyn Nicolas/Documents/Timothy/College/5th Year - 2st Sem/RubyOnRails/Portfolio/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport AppRouter from './AppRouter';\nimport './styles.css'; // Global styles with theme variables\n\nconst App = () => {\n  // Initialize theme from localStorage if available\n  const [theme, setTheme] = useState(() => {\n    return localStorage.getItem('theme') || 'light';\n  });\n\n  // Toggle between 'light' and 'dark'\n  const toggleTheme = () => {\n    setTheme(prev => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  // Persist theme and update global body class on theme change\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    // Adding the theme class to body for global styling\n    document.body.className = theme;\n  }, [theme]);\n\n  return (\n    // Apply a class to the top-level div based on the theme\n    <div className={`App ${theme}`}>\n      <AppRouter theme={theme} toggleTheme={toggleTheme} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAO,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,MAAM;IACvC,OAAOS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO;EACjD,CAAC,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBH,QAAQ,CAACI,IAAI,IAAKA,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACzD,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;IACpC;IACAO,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGT,KAAK;EACjC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX;IAAA;IACE;IACAH,OAAA;MAAKY,SAAS,EAAE,OAAOT,KAAK,EAAG;MAAAU,QAAA,eAC7Bb,OAAA,CAACF,SAAS;QAACK,KAAK,EAAEA,KAAM;QAACI,WAAW,EAAEA;MAAY;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD;EAAC;AAEV,CAAC;AAACf,EAAA,CAxBID,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AA0BT,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}